generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  password        String?
  firstName       String?
  lastName        String?
  phone           String?
  role            String       @default("USER")
  walletCardId    String?
  preferredCities String       @default("[]")
  location        String?
  newsletterOptIn Boolean      @default(false)
  termsAcceptedAt DateTime?
  emailVerified   Boolean      @default(false)
  emailVerifiedAt DateTime?
  emailVerifyToken String?
  emailVerifyTokenExpiry DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  merchant        Merchant?
  redemptions     Redemption[]
  walletCard      WalletCard?
  adminAuditLogs  AdminAuditLog[] @relation("AdminAuditLogs")
  auditLogs       AuditLog[]
  favorites       Favorite[]
  abuseReports    AbuseReport[]
  vouchers        Voucher[]

  @@map("users")
}

model Venue {
  id                  String               @id @default(cuid())
  merchantId          String
  name                String
  slug                String               @unique
  address             String
  latitude            Float
  longitude           Float
  businessType        String               @default("[]")
  priceTier           String               @default("MODERATE")
  hours               String               @default("{}")
  rating              Float?               @default(0)
  photos              String               @default("[]")
  isVerified          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deals               Deal[]
  dynamicPricingHints DynamicPricingHint[]
  merchant            Merchant             @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([latitude, longitude])
  @@map("venues")
}

model Merchant {
  id                String            @id @default(cuid())
  userId            String            @unique
  businessName      String
  companyName       String?
  firstName         String?
  lastName          String?
  contactEmail      String?
  businessAddress   String?
  cuisineType       String?
  website           String?
  abnOrEIN          String?
  payoutAccountId   String?
  kycStatus         String            @default("PENDING")
  approved          Boolean           @default(false)
  subscriptionStatus String           @default("TRIAL")
  stripeCustomerId  String?
  termsAcceptedAt   DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  settings          MerchantSettings?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  settlements       Settlement[]
  subscription      Subscription?
  venues            Venue[]

  @@map("merchants")
}

model Subscription {
  id                   String    @id @default(cuid())
  merchantId           String    @unique
  plan                 String
  status               String    @default("ACTIVE")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  trialStartedAt       DateTime?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  merchant             Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Deal {
  id             String       @id @default(cuid())
  venueId        String
  type           String       @default("HAPPY_HOUR")
  title          String
  description    String
  percentOff     Int
  originalPrice  Float?
  discountedPrice Float?
  startAt        DateTime
  endAt          DateTime
  maxRedemptions Int?
  redeemedCount  Int          @default(0)
  perUserLimit   Int          @default(1)
  priority       Int          @default(0)
  minSpend       Float?
  inPersonOnly   Boolean      @default(true)
  active         Boolean      @default(true)
  conditions     String       @default("[]")
  tags           String       @default("[]")
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  venue          Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  redemptions    Redemption[]
  favorites      Favorite[]
  abuseReports   AbuseReport[]
  vouchers       Voucher[]

  @@index([venueId, startAt, endAt])
  @@index([status])
  @@index([active])
  @@map("deals")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  dealId    String
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@unique([userId, dealId])
  @@index([userId])
  @@map("favorites")
}

model Redemption {
  id        String   @id @default(cuid())
  dealId    String
  userId    String
  status    String   @default("CLAIMED")
  code      String   @unique
  qrData    String?
  expiresAt DateTime
  redeemedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@index([code])
  @@map("redemptions")
}

model IdempotencyKey {
  id        String   @id @default(cuid())
  key       String   @unique
  response  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([key])
  @@map("idempotency_keys")
}

model AbuseReport {
  id          String   @id @default(cuid())
  dealId      String
  userId      String
  reason      String
  description String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deal        Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([dealId])
  @@index([userId])
  @@index([status])
  @@map("abuse_reports")
}

model ProcessedEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique
  type        String
  processedAt DateTime @default(now())

  @@map("processed_events")
}

model DynamicPricingHint {
  id                    String   @id @default(cuid())
  venueId               String
  window                String
  recommendedPercentOff Int
  confidence            Float
  createdAt             DateTime @default(now())
  venue                 Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("dynamic_pricing_hints")
}

model WalletCard {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  stripeCardId             String
  walletProvisioningStatus String   @default("PENDING")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_cards")
}

model Settlement {
  id          String   @id @default(cuid())
  merchantId  String
  periodStart DateTime
  periodEnd   DateTime
  gross       Float
  fees        Float
  net         Float
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

model MerchantSettings {
  id             String   @id @default(cuid())
  merchantId     String   @unique
  businessHours  String   @default("{}")
  quietWindows   String   @default("[]")
  defaultRules   String   @default("{}")
  notifications  String   @default("{}")
  payoutSettings String   @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  merchant       Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("merchant_settings")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  action      String
  entity      String
  entityId    String
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  actor       User?    @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  details    String
  targetType String?
  targetId   String?
  ipAddress  String
  userAgent  String
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, createdAt])
  @@index([action, createdAt])
  @@map("admin_audit_logs")
}

model AdminNotification {
  id        String   @id @default(cuid())
  type      String   // 'user_signup', 'merchant_application', 'deal_created', 'system_alert'
  title     String
  message   String
  priority  String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  data      String   @default("{}")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([type, createdAt])
  @@index([read, createdAt])
  @@map("admin_notifications")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  subscribed Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletters")
}

model Voucher {
  id        String   @id @default(cuid())
  dealId    String
  userId    String
  code      String   @unique
  status    String   @default("ACTIVE")
  expiresAt DateTime
  redeemedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([userId])
  @@map("vouchers")
}
// Force deployment with PostgreSQL schema - Thu Aug 28 12:45:10 EDT 2025
